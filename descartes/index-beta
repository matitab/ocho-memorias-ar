<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>Ocho Memorias Desde La Sombra</title>

		<!--<link rel="icon" href="assets/favicon.ico" type="image/x-icon" />-->

		<!-- Librerías: A-Frame y MindAR -->
		<script src="https://aframe.io/releases/1.6.0/aframe.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/mind-ar@1.2.5/dist/mindar-image-aframe.prod.js"></script>
		<!-- MQTT.js, implementa protocolo MQTT (habilitar en caso de implementación de uso de LEDs)
		<script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
		-->

		<!--Fuente utilizada: Courier Prime-->
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Courier+Prime&display=swap" as="style" />

		<!-- ======================== -->
		<!--        ESTILOS           -->
		<!-- ======================== -->
		<style>
        @keyframes rotation{0%{transform:rotate(0deg)}to{transform:rotate(360deg)}}
        @keyframes typing{0%{width:0;border-right-color:transparent}1%{border-right-color:#d1cfc7}to{width:16ch;border-right-color:#d1cfc7}}
        @keyframes blink{50%{border-color:transparent}}
        @keyframes fadeout-cursor{to{border-right-color:transparent}}
        @keyframes shadow-drop-center{0%{box-shadow:0 0 0 0 transparent}to{box-shadow:0 0 10px 0#3185ac}}
	  .loader,.loader::after{box-sizing:border-box;width:48px;height:48px;border-radius:50%}
      .loader{display:inline-block;border-top:4px solid #d1cfc7;border-right:4px solid transparent;animation:rotation 1s linear infinite}
      .loader::after{content:"";position:absolute;left:0;top:0;border-bottom:solid #3185ac;border-left:4px solid transparent}
      #mi-loader.hidden{display:none}
			.loader-container {
			    position: fixed;
			    top: 50%;
			    left: 50%;
			    transform: translate(-50%,-50%);
			    z-index: 10050;
			    background: rgba(0,0,0,.8);
			    padding: 1em;
			    border-radius: 1em
			}
			.fade-out-loader{opacity:0;transition:opacity .3s ease-in-out}
			#pantalla-fondo-negro {
			    position: fixed;
			    top: 0;
			    left: 0;
			    width: 100vw;
			    height: 100vh;
			    background-color: #111;
			    background-image: radial-gradient(circle at center,rgba(255,255,255,.06)0,rgba(200,200,200,.03) 25%,rgba(150,150,150,.015) 50%,transparent 80%);
			    z-index: 10005
			}
			#tsparticles {
			    position: absolute;
			    width: 100%;
			    height: 100%;
			    z-index: 10009;
			    pointer-events: none;
			    will-change: transform,opacity;
			    mix-blend-mode: screen
			}
			#pantalla-carga {
			    font-family: "Courier Prime",monospace;
			    position: fixed;
			    top: 0;
			    left: 0;
			    width: 100vw;
			    height: 100vh;
			    color: #d1cfc7;
			    display: flex;
			    justify-content: center;
			    align-items: center;
			    flex-direction: column;
			    text-align: center;
			    padding: 0 1em;
			    opacity: 1;
			    transition: opacity .7s ease;
			    z-index: 10010;
			    overflow: hidden
			}
			#pantalla-carga.fade-out{opacity:0}#titulo-principal{font-size:2em;font-weight:700;margin:0;color:#d1cfc7}
            #boton-comenzar,#subtitulo,#titulo-principal{font-family:"Courier Prime",monospace}
			#subtitulo {
			    font-size: 1.8em;
			    color: #3185ac;
			    font-weight: 600;
			    letter-spacing: .04em;
			    width: 0;
			    white-space: nowrap;
			    overflow: hidden;
			    border-right: 3px solid #d1cfc7;
			    animation: typing 2s steps(32,end) forwards,blink .5s step-end infinite;
			    animation-delay: .5s,.5s;
			    animation-fill-mode: both;
			    text-align: left;
			    display: inline-block
			}
			#boton-comenzar {
			    padding: 1em 2em;
			    font-size: 1.2em;
			    background-color: #d1cfc7;
			    color: #1a1a1a;
			    border: 0;
			    border-radius: .5em;
			    cursor: pointer;
			    user-select: none;
			    font-weight: 500;
			    transition: background-color .3s ease;
			    position: relative;
			    z-index: 10011
			}
			#boton-comenzar:hover{background-color:#3185ac;color:#d1cfc7;animation:shadow-drop-center .1s linear both}
			a-scene .a-enter-vr-button {
			    background-color: #d1cfc76e;
			    position: fixed!important;
			    bottom: 20px!important;
			    left: 20px!important;
			    right: auto!important;
			    z-index: 10012!important;
			    display: block!important
			}
			a-scene .a-enter-vr-button:hover {
			    background-color: #3185ac;
			    color: #d1cfc7;
			    box-shadow: 0 0 10px 0#3185ac;
			    transition: background-color .3s ease,color .3s ease
			}
			@media(max-width:425px){
            #titulo-principal{font-size:1.4em}
            #subtitulo{font-size:1.2em;margin-bottom:1em}
            #pantalla-carga p{font-size:1em;max-width:260px}
            #boton-comenzar{padding:.8em 1.5em;font-size:1em}.container-menu{width:80vw;height:25rem;padding:1.25rem}
            .nav-item{font-size:13px;line-height:30px}
			}
			#boton-play-pausa {
			    font-size: 2em;
			    padding: .2em .4em;
			    border-radius: .4em;
			    cursor: pointer;
			    background-color: #d1cfc7;
			    color: #1a1a1a;
			    border: 0;
			    user-select: none;
			    transition: background-color .3s ease
			}
			#boton-play-pausa:hover{background-color:#3185ac;color:#fff}

			.container-menu {
			background: rgba(0,173,196,.1);
			font-family: "Courier Prime", monospace;
			top: 0.625rem;
			left: 0.625rem;
			width: 18.75rem;
			height: 34.125rem;
			padding: 1.875rem;
			border-radius: 2rem;
			position: fixed;
			overflow: hidden;
			z-index: 10020;
			display: none;
			}
			.container-menu--bend {
			backdrop-filter: blur(3px);
			border-radius: 2rem;
			filter: url(#glass-blur);
			inset: 0;
			position: absolute;
			z-index: 0;
			}
			.button-toggle .bar {transform-origin: center;}
			#toggle-M1{display:none}
            #toggle-M1:checked~.toggle-container .button-toggle{background-color:rgba(0,173,196,.3)}
            #toggle-M1:checked~.toggle-container .button-toggle .bar:nth-child(1){transform: rotate(45deg); position: absolute;}
            #toggle-M1:checked~.toggle-container .button-toggle .bar:nth-child(2){opacity:0}
            #toggle-M1:checked~.toggle-container .button-toggle .bar:nth-child(3){transform: rotate(-45deg); position: absolute;}
            #toggle-M1:checked~.dummy-content,#toggle-M1:checked~.nav{opacity:0;transform:translateY(-20px);pointer-events:none;visibility:hidden}
            #toggle-M1:checked~.dummy-content{transform:translateY(20px)}
            #toggle-M1:not(:checked)~.dummy-content,
            #toggle-M1:not(:checked)~.nav{opacity:1;transform:translateY(0);visibility:visible;pointer-events:auto}
            .toggle-container{position:relative}.button-toggle,.nav{display:flex;flex-direction:column}.button-toggle {
			    text-align: center;
			    position: fixed;
			    top: 1.2rem;
				left: 1.2rem;
			    width: 30px;
			    height: 30px;
			    background: rgba(0,173,196,.1);
			    border: 0;
			    cursor: pointer;
			    border-radius: 50%;
			    transition: background-color .3s ease;
			    z-index: 10021;
			    justify-content: center;
			    align-items: center
			}
			.button-toggle:hover {background-color: rgba(0,173,196,.2)}
			.button-toggle .bar {
			    width: 18px;
			    height: 3px;
			    background-color: #fff;
			    border-radius: 5px;
			    margin: 2px 0;
			    transition: transform .3s ease,opacity .3s ease
			}
			.nav {gap: 16px;margin: 30px 20px 20px}
			.nav-item {
			    display: block;
			    line-height: 32px;
			    transition: opacity .3s ease,transform .3s ease;
			    text-align: center;
			    border-radius: 8px;
			    box-shadow: inset 1px 1px 1px 0 rgba(0,173,196,.1),inset -1px -1px 1px 0 rgba(0,173,196,.1);
			    justify-content: center;
			    align-items: center;
			    height: 32px;
			    padding: 4px;
			    width: 100%;
			    color: #fff;
			    font-size: 14px;
			    text-transform: uppercase;
			    cursor: pointer;
			    background: linear-gradient(90deg,#1a76ad 0,#288ec9 100%);
			    z-index: 3
			}
			.nav-item:hover {background: linear-gradient(90deg,#288ec9 0,#1a76ad 100%)}
			.nav-item:nth-child(1) {transition-delay: .1s}
			.nav-item:nth-child(2) {transition-delay: .2s}
			.nav-item:nth-child(3) {transition-delay: .3s}
			.dummy-content {
			    position: absolute;
			    bottom: 15px;
			    left: 15px;
			    right: 15px;
			    visibility: hidden;
			    color: #ffffff;
			    text-align: center;
			    z-index: 3;
			    background: #3185ac;
			    border-radius: 8px;
			    padding: 10px;
			    font-size: 15px;
			    box-shadow: inset 1px 1px 1px 0 rgba(255, 255, 255, 0.637),inset -1px -1px 1px 0 rgba(255,255,255,.45)
			}
			.nombre-content { 
			margin-bottom: 8px;
			margin-top: 0;
			white-space: nowrap;
			padding: 2px 8px;
			font-size: 0.92em;
			min-width: 180px;
			max-width: 90%;
			line-height: 1.2;
			background: rgba(49, 133, 172, 0.85);
			font-weight: 600;
			letter-spacing: 0.03em;
			box-shadow: none;
			cursor: default;
			text-transform: uppercase;
			pointer-events: none;
			border-radius: 8px;
			width: 250px;
			color: #fff;
			display: flex;
			justify-content: center;
			align-items: center;	
			margin-left: 10px;
			margin-right: auto;
			font-family: "Courier Prime",monospace;
			font-size: 0.9em;
			color: #ffffff;
			box-shadow: inset 1px 1px 1px 0 rgba(255, 255, 255, 0.637),inset -1px -1px 1px 0 rgba(255,255,255,.45)
			}
		</style>
		
	</head>
	<body>
		<!-- Pantalla de fondo -->
		<div id="pantalla-fondo-negro"></div>
		<!-- Efecto sutíl de partículas -->
		<div id="tsparticles" style="display:none;"></div>
		<!-- Pantalla de carga -->
		<div id="pantalla-carga" style="display:none;">
			<h1 id="titulo-principal">Ocho memorias</h1>
	
			<h2 id="subtitulo">desde la sombra</h2>
			<p>Explorá el mapa y enfocá los distintos marcadores para conocer las historias.</p>
			<button id="boton-comenzar" style="display:none;">Empezar recorrido</button>
		</div>
		<!-- Loader -->
		<div id="mi-loader" class="loader-container">
			<span class="loader"></span>
		</div>

		<!-- Menú marcador 0 -->
		<div class="container-menu" id="Menu-M0">
			<div class="container-menu--bend"></div>
			<input type="checkbox" id="toggle-M0" />
				<div class="toggle-container">
					<button class="button-toggle">
						<span class="bar"></span>
						<span class="bar"></span>
						<span class="bar"></span>
					</button>
				</div>
			
			<div class="nav">
				<div class="nombre-content" id="nombre-persona"><p>Nombre y apellido persona</p></div>
				<div class="nav-item" onclick="showContent('M1-Info')">M1-Info</div>
				<div class="nav-item" onclick="showContent('Historia')">Historia</div>
				<div class="nav-item" onclick="showContent('Imágenes')">Imágenes</div>
				<div class="nav-item" onclick="showContent('M1-Video')">M1-Video</div>
			</div>
			<div class="dummy-content" id="menu-content">
				<p>Selecciona una opción del menú</p>
			</div>
		</div>

		<!-- Menú marcador 1 -->
		<div class="container-menu" id="Menu-M1">
			<div class="container-menu--bend"></div>
			<input type="checkbox" id="toggle-M1" />
				<div class="toggle-container">
					<button class="button-toggle">
						<span class="bar"></span>
						<span class="bar"></span>
						<span class="bar"></span>
					</button>
				</div>
			
			<div class="nav">
				<div class="nombre-content" id="nombre-persona"><p>Nombre y apellido persona</p></div>
				<div class="nav-item" onclick="showContent('M1-Info')">M1-Info</div>
				<div class="nav-item" onclick="showContent('Historia')">Historia</div>
				<div class="nav-item" onclick="showContent('Imágenes')">Imágenes</div>
				<div class="nav-item" onclick="showContent('M1-Video')">M1-Video</div>
			</div>
			<div class="dummy-content" id="menu-content">
				<p>Selecciona una opción del menú</p>
			</div>
		</div>
		
		
		<!-- ====================================== -->
		<!--  BOTONES / INTERACCIÓN CON EL USUARIO  -->
		<!-- ====================================== -->
		<!-- Botón de play/pausa video -->
		<div style="position: fixed; bottom: 20px; right: 20px; z-index: 10000;">
			<button id="boton-play-pausa" style="display: none;"></button>
		</div>
		<!-- Botones de control LED (habilitar para facilitar testeo)
<div style="position: fixed; bottom: 20px; left: 20px; z-index: 10000;">
  <button onclick="encenderLed()" style="font-size: 1.2em; margin-right: 8px;">Encender LED</button>
  <button onclick="apagarLed()" style="font-size: 1.2em;">Apagar LED</button>
</div>
-->
		<!-- Contador de marcadores detectados -->
		<div id="contador-marcadores" style="
        position: fixed;
        top: 10px;
        right: 30px;
        z-index: 10050;
        background: rgba(0, 173, 196, 0.479);
        color: white;
        padding: 0.4em 0.6em;
        border-radius: 2rem;
        font-family: Courier Prime, monospace;
        font-size: 1em;
        display: none;"
		><!-- Mensaje por defecto: --> Escaneaste 0 de 3 imágenes
		</div>

		<!-- Cartel recorrido completado (si todos los marcadores son escaneados)-->
		<div id="mensaje-final" style="display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.411);
        color: #4fc3f7;
        padding: 2em;
        font-size: 1.4em;
        border-radius: 1em;
        text-align: center;
        z-index: 10050;
        font-family: Courier Prime, monospace;
        max-width: 80vw;"
		><!-- Mensaje por defecto: -->¡Completaste el recorrido! <br /><br /><small> Click para cerrar </small>
		</div>

		<!-- ======================== -->
		<!--      ESCENA MIND-AR      -->
		<!-- ======================== -->
		<!-- Contiene la información que mostraremos al usuario cuando escanee los marcadores (entities)-->
		<!-- En caso de agregar más marcadores, usar alguno de los <a-entity> como base -->
		<a-scene
			mindar-image="imageTargetSrc: targets.mind; maxTrack: 3; uiLoading:no; uiScanning:no"
			color-space="sRGB"
			renderer="colorManagement: true, physicallyCorrectLights"
			vr-mode-ui="enabled: true"
			device-orientation-permission-ui="enabled: false">
			<!-- ======================== -->
			<!--        ASSETS            -->
			<!-- ======================== -->
			<!-- Acá agregamos los videos e imágenes que queremos mostrar al usuario -->
			<a-assets>
				<!-- Video de prueba 1-->
				<video id="video1-M2" src="assets/video1test.mp4" preload="auto" loop playsinline></video>
				<img id="imgtest1" src="assets/imagentest1.png" alt="" />
			</a-assets>
			<!-- Cámara-->
			<a-camera position="0 0 0" look-controls="enabled: false"></a-camera>
			<!-- Marcador 0 -->
			<a-entity mindar-image-target="targetIndex: 0" data-index="0">
				<a-text value="Gato" color="white" align="center" position="0 0 0.1" width="1.5"> </a-text>
				<a-image src="#imgtest1" position="0 0 0" width="0.5" height="0.5"></a-image>
			</a-entity>

			<!-- Marcador 1 -->
			<a-entity mindar-image-target="targetIndex: 1" data-index="1">
			</a-entity>

			<!-- Marcador 2 -->
			<a-entity mindar-image-target="targetIndex: 2" data-index="2">
				<a-text value="Perro" color="white" align="center" position="0 0.3 0.1" width="1.5"> </a-text>
				<a-video src="#video1-M2" position="0 -0.2 0" width="1" height="0.7" rotation="0 0 0" muted="false" playsinline="true"> </a-video>
			</a-entity>
			<!-- la cantidad de marcadores debe coincidir con la cantidad de imágenes cargadas en targets.mind -->
		</a-scene>

		<!-- Carga de contenido -->
		<script>
			  document.addEventListener("DOMContentLoaded",()=>{

/*
			    //Play/Pause videos
			    const botonPlayPausa = document.getElementById("boton-play-pausa");
			    const videoM2 = document.getElementById("video1-M2");
			    const Marcador2 = document.querySelector('[mindar-image-target="targetIndex: 2"]');
			    botonPlayPausa.style.display = "none";
			    // Mostrar y reproducir el video cuando detecta el target
			    Marcador2.addEventListener("targetFound", () => {
			      videoM2.style.display = "block";
			      videoM2.style.position = "static";
			      videoM2.style.left = "0";
			      videoM2.play();
			      botonPlayPausa.style.display = "block";
			      botonPlayPausa.textContent = "⏸️";
			    });
			    // Ocultar y pausar el video cuando pierde el target
			    Marcador2.addEventListener("targetLost", () => {
			      videoM2.pause();
			      videoM2.style.display = "none";
			      videoM2.style.position = "absolute";
			      videoM2.style.left = "-9999px";
			      botonPlayPausa.style.display = "none";
			    });
			    // Play/Pause manual
			    botonPlayPausa.addEventListener("click", () => {
			      if (videoM2.paused) {
			        videoM2.play();
			        botonPlayPausa.textContent = "⏸️";
			        } else {
			        videoM2.pause();
			        botonPlayPausa.textContent = "▶️";
			        }});
					*/


			    const loader = document.getElementById("mi-loader");
			    const boton = document.getElementById("boton-comenzar");
			    const pantalla = document.getElementById("pantalla-carga");
			    const pantallaFondo = document.getElementById("pantalla-fondo-negro");
			    const tsparticles = document.getElementById("tsparticles");
			    const escena = document.querySelector("a-scene");
			    escena.addEventListener("renderstart", () => {
			      pantalla.style.display = "flex";
			      pantallaFondo.style.display = "block";
			      tsparticles.style.display = "block";
			      boton.style.display = "inline-block";
			      loader.classList.add("fade-out-loader");
			      loader.addEventListener("transitionend", () => {
			        loader.style.display = "none";
			      }, { once: true });
            pantalla.classList.remove("fade-out");
			  });
			  // Botón "Empezar recorrido" activa MindAR y oculta la pantalla de carga
			    boton.addEventListener('click', () => {
			    pantalla.classList.add('fade-out');
			    pantalla.addEventListener('transitionend', () => {
			      pantalla.style.display = 'none';
			      pantallaFondo.style.display = 'none';
			      tsparticles.style.display = 'none';
			    }, { once: true });
			    escena.components['mindar-image'].start();
			  });
			  

			function menuAbierto(menuId) {
			  const menu = document.getElementById(menuId);
			  const nav = document.querySelector(`#${menuId} .nav`);
			  const dummyContent = document.querySelector(`#${menuId} .dummy-content`);
			  const nombre = document.getElementById("nombre-persona");
			  if (menu && nav && dummyContent) {
			    menu.style.display = "block";
			    menu.style.width = "18.75rem";
			    menu.style.height = "32.125rem";
			    menu.style.padding = "1.875rem";
			    nav.style.opacity = "1";
			    nav.style.transform = "translateY(0)";
			    nav.style.pointerEvents = "auto";
			    nav.style.visibility = "visible";
			    dummyContent.style.opacity = "1";
			    dummyContent.style.transform = "translateY(0)";
			    dummyContent.style.pointerEvents = "auto";
			    dummyContent.style.visibility = "visible";
				nombre.style.visibility = "visible";
			  }}
			function menuCerrado(menuId) {
			  const menu = document.getElementById(menuId);
			  const nav = document.querySelector(`#${menuId} .nav`);
			  const dummyContent = document.querySelector(`#${menuId} .dummy-content`);
			  const nombre = document.getElementById("nombre-persona");
			  if (menu && nav && dummyContent) {
			    menu.style.width = "2.5rem";
			    menu.style.height = "2.5rem";
			    menu.style.padding = "0.3rem";
			    nav.style.opacity = "0";
			    nav.style.transform = "translateY(-20px)";
			    nav.style.pointerEvents = "none";
			    nav.style.visibility = "hidden";
			    dummyContent.style.opacity = "0";
			    dummyContent.style.transform = "translateY(20px)";
			    dummyContent.style.pointerEvents = "none";
			    dummyContent.style.visibility = "hidden";
				nombre.style.visibility = "hidden";
			  }}

			  

			function contenidoMarcador1() {
			  window.showContent = function (option) {
			    const contentDiv = document.getElementById("menu-content");
			    if (!contentDiv) return;
			    let content = "";
			    switch (option) {
			      case "M1-Info":
			        content = "<p>Información 1</p>";
			        break;
			      case "Historia":
			        content = "<p>Historia 1</p>";
			        break;
			      case "Imágenes":
			        content = '<img src="assets/carpincho.jpeg" style="width: 100%; max-width: 200px; height: auto; border-radius: 8px;">';
			        break;
				  case "M1-Video":
			        content = '<video src="assets/video1test.mp4" controls style="width: 100%; max-width: 12.5rem; height: 8.5rem; border-radius: 8px;"></video>';
			        break;
			      default:
			        content = "<p>Selecciona una opción del menú</p>";
			    }
			    contentDiv.innerHTML = content;
			  };}

			  

			// Menú marcador 1
			const Marcador1 = document.querySelector('[mindar-image-target="targetIndex: 1"]');
			const toggleM1 = document.getElementById("toggle-M1");
			const menuM1 = document.getElementById("Menu-M1");
			const toggleButtonM1 = document.querySelector("#Menu-M1 .button-toggle");
			if (Marcador1 && toggleM1 && menuM1 && toggleButtonM1) {
			  Marcador1.addEventListener("targetFound", () => {
				const nombreDiv = document.getElementById("nombre-persona");
				nombreDiv.innerHTML = "<p>Nombre y apellido persona</p>"; 
			     menuM1.style.display = "block";
			    menuAbierto("Menu-M1");
			    toggleM1.checked = true;
			  });
			  Marcador1.addEventListener("targetLost", () => {
			  });
      toggleButtonM1.addEventListener("click", () => {
      toggleM1.checked = !toggleM1.checked;
      if (toggleM1.checked) {
        menuM1.style.display = "block";
        menuAbierto("Menu-M1");
      } else {
        menuCerrado("Menu-M1");
      }
      });} contenidoMarcador1();

	  
	/* Contador de marcadores detectados */
	const marcadorDetectado = new Set(); // índices de los target ya escaneados
	const totalMarcadores = 3;
	const contadorDiv = document.getElementById("contador-marcadores");
	const actualizarContador = () => {
	contadorDiv.textContent = `Escaneaste ${marcadorDetectado.size} de ${totalMarcadores} imágenes`;
	contadorDiv.style.display = "block";
	setTimeout(() => {
		contadorDiv.style.display = "none";
	}, timeout = 3000);
	if (marcadorDetectado.size === totalMarcadores) {
		setTimeout(() => {
		document.getElementById("mensaje-final").style.display = "block";
		}, 500);}};
		// eventos de detección (si agregamos más targets, modificar índice)
		[0, 1, 2].forEach(index => {
		const target = document.querySelector(`[mindar-image-target="targetIndex: ${index}"]`);
		if (!target) return;
			target.addEventListener("targetFound", () => {
			if (!marcadorDetectado.has(index)) {
			    marcadorDetectado.add(index);
			    actualizarContador();
			    }});});
			// cierra mensaje con click
			document.getElementById("mensaje-final").addEventListener("click", () => {
			document.getElementById("mensaje-final").style.display = "none";
			});});
		</script>		    

		<!-- MQTT - Script para conectar el repo a la nube (habilitar en caso de implementación de uso de LEDs)
<script>
  const options = {
    username: 'esp32user', // Usuario HiveMQ
    password: 'Ochohistorias2025',  // contraseña HiveMQ
    clean: true, reconnectPeriod: 1000, connectTimeout: 30 * 1000,
    clientId: 'WebClient_' + Math.random().toString(16).substr(2, 8), protocol: 'wss',};
  const connectUrl = 'wss://1c26c61f82654cb3a64a06309ccffa42.s1.eu.hivemq.cloud:8884/mqtt';
  const client = mqtt.connect(connectUrl, options);
  client.on('connect', () => {console.log('Conectado a HiveMQ Cloud desde el Frontend');});
  client.on('error', (err) => {console.error('Error en MQTT:', err);});

  function encenderLed() {client.publish('led/control', 'on'); console.log('Enviado: on');}
  function apagarLed() {client.publish('led/control', 'off'); console.log('Enviado: off');}
</script> -->
		<!-- Script encender y apagar LEDs segun reconoce marcadores (habilitar en caso de implementación de uso de LEDs)-->
		<!-- LED GPIO HIGH/LOW según el marcador detectado
<script>
  function controlarLedPorMarcador(targetIndex, topic) {
    const target = document.querySelector(`[mindar-image-target="targetIndex: ${targetIndex}"]`);
    if (!target) {console.warn(`No se encontró el marcador targetIndex: ${targetIndex}`); return; }
    target.addEventListener("targetFound", () => {console.log(`Marcador ${targetIndex} detectado`); client.publish(topic, 'on'); });
    target.addEventListener("targetLost", () => {console.log(`Marcador ${targetIndex} perdido`); client.publish(topic, 'off');
    });}
  document.addEventListener("DOMContentLoaded", () => {
    controlarLedPorMarcador(0, 'led/pin4');  // Gato -> Pin 4 (GPIO 4)
    controlarLedPorMarcador(1, 'led/pin13'); // Carpincho -> Pin 13
    controlarLedPorMarcador(2, 'led/pin5');  // Perro -> Pin 5
  });
</script> -->


		<script src="https://cdn.jsdelivr.net/npm/tsparticles@2.11.1/tsparticles.bundle.min.js"></script>
		<!-- Config. partículas -->
		<script>
			tsParticles.load("tsparticles",{particles:{number:{value:40,density:{enable:true,value_area:800}},
			color:{value: ["#ffffff", "#ddeeff", "#cceeff"]},
			shape:{type:"circle",stroke:{width:0}},opacity:{value:0.8,random:true, anim:{enable:true,speed:1,opacity_min:0.1,sync:false}},
			size:{value:3.5,random:true,anim:{enable:false,speed:4,size_min:0.8,sync:false}},line_linked:{enable:false},
			shadow: {enable: true, color: "#ffffff", blur: 6},
			move:{enable: true, speed: 0.25, direction: "none", random: true, straight: false, out_mode: "out", bounce: false,}},
			interactivity:{detect_on:"window",events:{onhover:{enable:false},onclick:{enable:false},resize:true}}, retina_detect:true});
		</script>

	<svg style="display: none" xmlns="http://www.w3.org/2000/svg">
	<filter id="glass-blur" x="0" y="0" width="100%" height="100%" filterUnits="objectBoundingBox">
		<feTurbulence type="fractalNoise" baseFrequency="0.003 0.007" numOctaves="1" result="turbulence" />
		<feDisplacementMap in="SourceGraphic" in2="turbulence" scale="200" xChannelSelector="R" yChannelSelector="G" />
	</filter>
	</svg>

	</body>
</html>

